<?  ##############################################################################################  #### armorylite.com ##########################################################################  ##############################################################################################  if (defined("AL_INC")) { return; }  require_once("common.mysql.class.php");  define("MIRROR_VERSION", "5");  define("TALENT_BUILD", 0);  define("USE_CURL", true);  define("AL_INC", true);  define("t","\t");  define("r","\n");  define("rr","\n\n");  define("LOG_ERRORS", false);  define("NOTIFY_ADMIN", false);  define("ADMIN_EMAIL", "support@armorylite.com");  define("CONTENT_EXPIRE", (60 * 60 * 24));  define("PER_PAGE", "300");  define("NOTES_PER_PAGE", "100");  define("SALT", "veRdaNT2");  define("ICON_SERVER_PATH", "/home/armorylite.com/icons/");  define("ICON_WEB_PATH", "http://armorylite.com/icons/");  define("DEBUG", true);  #### global functions ########################################################################  function handleError($p_script, $p_errors, $p_log=true, $p_admin=true) {    $log = "$p_script\n";     $html  = "<html>\n";    $html .= "<head>\n";    $html .= "<title>Armory Lite System Maintenance</title>\n";    $html .= "</head>\n";    $html .= "<body bgcolor=\"#000000\">\n";    $html .= "<table border=\"0\" width=\"100%\" height=\"100%\">\n";    $html .= "  <tr><td align=\"middle\" valign=\"middle\" style='font-family:arial; font-size: 12px; color:#ffffff;'><img src='/images/logo_mid_dark.gif'><br><br>\n";    $html .= "Woops, it looks like we're working on things. Please check back soon!";	$html .= '	<br><br><center>	<object width="420" height="255" id="lsplayer" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"><param name="movie"	value="http://cdn.livestream.com/grid/LSPlayer.swf?channel=vannatter&amp;autoPlay=false"></param><param name="allowScriptAccess" value="always"></param><param	name="allowFullScreen" value="true"></param><embed name="lsplayer" wmode="transparent"	src="http://cdn.livestream.com/grid/LSPlayer.swf?channel=vannatter&amp;autoPlay=false" width="420" height="255" allowScriptAccess="always" allowFullScreen="true"	type="application/x-shockwave-flash"></embed></object>	</center>	';    $html .= "  </td></tr>\n";    $html .= "</table>\n";    $html .= "</body>\n";    $html .= "</html>\n";    echo($html);    exit();  }  $g_ext = "armorylite_dev";  $c_ext = "conflct_development";  $g_db  = new db("armorylite_dev", true);  if (count($g_db->errors) > 0) {    handleError($SCRIPT_NAME, $g_db->errors);  }  #### armorylite.com ##########################################################################  #### main class structure ####################################################################  class armorylite {    var $err = array();    var $db;    var $xml;    var $debug;        var $chid;      var $active_url;    var $lite_url;    var $main_url;    var $talent_url;    var $rep_url;    var $skill_url;    var $guild_url;    var $arena_url;    var $search_url;    var $achieve_url;    var $stat_url;    var $page;    var $query_string;    var $guild_name;    var $z;    var $r;    var $n;    var $x;        var $sql;    var $is_dev = false;    var $is_archive = false;      var $is_saved = false;    var $gear_score = 0;    var $anon = false;    var $page_type = 0;    var $mh_v = 0;    var $mh_s = 0;    var $oh_v = 0;    var $oh_s = 0;    var $melee_on = false;    var $spell_on = false;    var $range_on = false;        var $aff_id;    var $aff_dat;    var $aff_content;        var $sav_content;        var $class_array   = array(1=>'Warrior', 2=>'Paladin', 3=>'Hunter', 4=>'Rogue', 5=>'Priest', 6=>'Death Knight', 7=>'Shaman', 8=>'Mage', 9=>'Warlock', 10=>'', 11=>'Druid');    var $gender_array  = array(0=>'Male', 1=>'Female');    var $faction_array = array(0=>'Alliance', 1=>'Horde');    var $race_array    = array(1=>'Human', 2=>'Orc', 3=>'Dwarf', 4=>'Night Elf', 5=>'Undead', 6=>'Tauren', 7=>'Gnome', 8=>'Troll', 9=>'', 10=>'Blood Elf', 11=>'Draenei');        function __construct() {      $this->db = $GLOBALS["g_db"];      $this->affiliate_check();      $this->dev_check();    }    function __destruct() {      $this->db->close();          return true;    }    function is_mobile() {      if(strpos($_SERVER['HTTP_USER_AGENT'], 'iPhone') || strpos($_SERVER['HTTP_USER_AGENT'], 'iPod')) {         return true;      } else {        return false;      }    }    ### api functions #########################################################################################    function api_validatekey($key_id) {      $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".affiliates WHERE Affiliate_API_Key = '" . addslashes($key_id) . "' AND Affiliate_Status = 1";      $res = $this->db->query($sql);      $rec = $this->db->fetch_array($res);            if ($rec["Affiliate_ID"]) {        return $rec["Affiliate_ID"];      } else {        return 0;      }    }        function dev_check() {      $_tmp = trim(strtolower($_SERVER["SERVER_NAME"]));      if ($_tmp == "dev.armorylite.com") {         $this->is_dev = true;      } else {        $this->is_dev = false;      }    }        ### affiliate functions ###################################################################################    function affiliate_check() {      $_tmp = strtolower($_SERVER["SERVER_NAME"]);      $_tmp = str_replace(".dev.armorylite.com","",$_tmp);      $_tmp = str_replace(".armorylite.com","",$_tmp);      if (strpos($_tmp, "affiliate")) {        $_aff = str_replace(".affiliate","",$_tmp);                $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".affiliates WHERE Affiliate_URL_Key = '" . $_aff . "'";        $this->debug .= $sql . "<br>";        $res = $this->db->query($sql);        $rec = $this->db->fetch_array($res);        if ($rec["Affiliate_ID"]) {          $this->aff_id = $rec["Affiliate_ID"];          $this->aff_dat = $rec;          $cql = "SELECT * FROM ".$GLOBALS["g_ext"].".affiliate_content WHERE Affiliate_ID = '" . $rec["Affiliate_ID"] . "'";          $this->debug .= $cql . "<br>";          $ces = $this->db->query($cql);                    while ($cec = $this->db->fetch_array($ces)) {            switch ($cec["Content_Type"]) {              case "1":                $this->aff_content["header"] = $cec["Content_Body"];                break;                              case "2":                $this->aff_content["footer"] = $cec["Content_Body"];                break;            }          }        }      }    }        function affiliate_menu() {      $c  = 1;      $t  = "";      $t .= "<div class=\"my_ele_head\">" . $this->aff_dat["Affiliate_Name"] . "</div>";      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".affiliate_menu WHERE Affiliate_ID = '" . $this->aff_dat["Affiliate_ID"] . "' ORDER BY Item_Order";      $this->debug .= $q . "<br>";      $s = $this->db->query($q);      while ($r = $this->db->fetch_array($s)) {        $t .= "<div onMouseover=\"mnu_on('mnu_" . $c . "')\" onMouseout=\"mnu_off('mnu_" . $c . "')\" id=\"mnu_" . $c . "\" class=\"my_ele\">";        $t .= "<a href=\"" . stripslashes($r["Item_URL"]) . "\">" . stripslashes($r["Item_Text"]) . "</a>";        $t .= "</div> \n";        $c++;      }      return $t;    }        ###########################################################################################################    function stats_browse($z, $r, $filter="") {            $fsql = "";      if ($filter) {        if ($filter != "all") {          switch ($filter) {            case "achpts":                $fsql = " AND (`ACHPTS` > 0) ORDER BY `ACHPTS` DESC ";              break;            case "hp":                $fsql = " AND (`HP` > 0) ORDER BY `HP` DESC ";              break;            case "mp":                $fsql = " AND (`MP` > 0) ORDER BY `MP` DESC ";              break;            case "armor":                $fsql = " AND (`ARMOR` > 0) ORDER BY `ARMOR` DESC ";              break;            case "sta":                $fsql = " AND (`STA` > 0) ORDER BY `STA` DESC ";              break;            case "str":                $fsql = " AND (`STR` > 0) ORDER BY `STR` DESC ";              break;            case "int":                $fsql = " AND (`INT` > 0) ORDER BY `INT` DESC ";              break;            case "agi":                $fsql = " AND (`AGI` > 0) ORDER BY `AGI` DESC ";              break;                      case "spi":                $fsql = " AND (`SPI` > 0) ORDER BY `SPI` DESC ";              break;            case "spdmg":                $fsql = " AND (`SPDMG` > 0) ORDER BY `SPDMG` DESC ";              break;                      case "heal":                $fsql = " AND (`HEAL` > 0) ORDER BY `HEAL` DESC ";              break;                      case "ap":                $fsql = " AND (`AP` > 0) ORDER BY `AP` DESC ";              break;                      case "resil":                $fsql = " AND (`RESIL` > 0) ORDER BY `RESIL` DESC ";              break;                      case "hk":                $fsql = " AND (`HK` > 0) ORDER BY `HK` DESC ";              break;                      default:              $fsql = " AND (`ACHPTS` > 0) ORDER BY `ACHPTS` DESC ";              break;                    }        } else {          $fsql = " AND (`ACHPTS` > 0) ORDER BY `ACHPTS` DESC ";        }      } else {        $fsql = " AND (`ACHPTS` > 0) ORDER BY `ACHPTS` DESC ";      }          if ($z == "all") {        $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters c WHERE c.Status > 0 " . $fsql . " LIMIT 300";      } else if ($r == "all") {        $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters c WHERE c.Status > 0 AND c.Region = '" . addslashes($z) . "' " . $fsql . " LIMIT 300";      } else {        $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters c WHERE c.Status > 0 AND c.Region = '" . addslashes($z) . "' AND c.Server = '" . addslashes($r) . "' " . $fsql . " LIMIT 300";      }      $this->debug .= $q . "<br>";      $rs = $this->db->query($q);      return $rs;    }    function stats_name($stat) {      switch ($stat) {        case "achpts":            $fsql = " Achievement Points ";          break;        case "hp":            $fsql = " Health ";          break;        case "mp":            $fsql = " Mana ";          break;        case "armor":            $fsql = " Armor ";          break;        case "sta":            $fsql = " Stamina ";          break;        case "str":            $fsql = " Strength ";          break;        case "int":            $fsql = " Intellect ";          break;        case "agi":            $fsql = " Agility ";          break;                  case "spi":            $fsql = " Spirit ";          break;        case "spdmg":            $fsql = " Spell Damage ";          break;                  case "heal":            $fsql = " Healing ";          break;                  case "ap":            $fsql = " Attack Power ";          break;                  case "resil":            $fsql = " Resilience ";          break;                  case "hk":            $fsql = " Honorable Kills ";          break;                  default:          $fsql = " Achievement Points ";          break;                }         return $fsql;     }    function stats_shortname($stat) {      switch ($stat) {        case "achpts":            $fsql = "ACHPTS";          break;        case "hp":            $fsql = "HP";          break;        case "mp":            $fsql = "MP";          break;        case "armor":            $fsql = "ARMOR";          break;        case "sta":            $fsql = "STA";          break;        case "str":            $fsql = "STR";          break;        case "int":            $fsql = "INT";          break;        case "agi":            $fsql = "AGI";          break;                  case "spi":            $fsql = "SPI";          break;        case "spdmg":            $fsql = "SPDMG";          break;                  case "heal":            $fsql = "HEAL";          break;                  case "ap":            $fsql = "AP";          break;                  case "resil":            $fsql = "RESIL";          break;                  case "hk":            $fsql = "HK";          break;                  default:          $fsql = "ACHPTS";          break;                }         return $fsql;     }    function stats_filterlist($stat) {        $tstr .= "<option " . (($stat == "achpts") ? " selected " : "") . " value=\"achpts\">Achievement Points</option>";              $tstr .= "<option " . (($stat == "hp") ? " selected " : "") . " value=\"hp\">Health</option>";              $tstr .= "<option " . (($stat == "mp") ? " selected " : "") . " value=\"mp\">Mana</option>";              $tstr .= "<option " . (($stat == "armor") ? " selected " : "") . " value=\"armor\">Armor</option>";              $tstr .= "<option " . (($stat == "sta") ? " selected " : "") . " value=\"sta\">Stamina</option>";              $tstr .= "<option " . (($stat == "str") ? " selected " : "") . " value=\"str\">Strength</option>";              $tstr .= "<option " . (($stat == "int") ? " selected " : "") . " value=\"int\">Intellect</option>";              $tstr .= "<option " . (($stat == "agi") ? " selected " : "") . " value=\"agi\">Agility</option>";              $tstr .= "<option " . (($stat == "spi") ? " selected " : "") . " value=\"spi\">Spirit</option>";              $tstr .= "<option " . (($stat == "spdmg") ? " selected " : "") . " value=\"spdmg\">Spell Damage</option>";              $tstr .= "<option " . (($stat == "heal") ? " selected " : "") . " value=\"heal\">Healing</option>";              $tstr .= "<option " . (($stat == "ap") ? " selected " : "") . " value=\"ap\">Attack Power</option>";              $tstr .= "<option " . (($stat == "resil") ? " selected " : "") . " value=\"resil\">Resilience</option>";              $tstr .= "<option " . (($stat == "hk") ? " selected " : "") . " value=\"hk\">Honorable Kills</option>";              return $tstr;    }        function show_ad($loc, $typ) {      $_t = "";      $_id = -1;            switch ($typ) {        case "block":          $_id     = 10;          $_width  = 125;          $_height = 125;          break;        case "tall":          $_id     = 1; ## was 12, 1          $_width  = 120;          $_height = 600;          break;        case "tall2":          $_id     = 11;          $_width  = 120;          $_height = 600;          break;        case "tinytall":          $_id     = 7;          $_width  = 120;          $_height = 240;          break;        case "tallhouse":          $_id     = 12; ## was 1, 9          $_width  = 120;          $_height = 600;          break;                  case "tall450":          $_id     = 8;          $_width  = 120;          $_height = 450;          break;                            case "wide":          $_id     = 3; ## was 3          $_width  = 728;          $_height = 90;          break;        case "banner":          $_id     = 4;          $_width  = 468;          $_height = 60;          break;      }            define('MAX_PATH', '/home/openx');      if (@include_once(MAX_PATH . '/www/delivery/alocal.php')) {        if (!isset($phpAds_context)) {          $phpAds_context = array();        }         $phpAds_raw = view_local('', $_id, 0, 0, '', '', '0', $phpAds_context, '');      }      $_t .= "<div class='ad ad_" . $_width . "'>" . r;      $_t .= $phpAds_raw['html'];      $_t .= "</div>" . r;            return $_t;        }        function anon_create($chid) {      $tim = time();      $sql = "INSERT INTO ".$GLOBALS["g_ext"].".anons (Character_ID, Create_Date) VALUES ('" . addslashes($chid) . "','" . $tim . "')";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        $_id = $this->db->insert_id();        return $_id;      }    }        function anon_getcharacterinfo($anon_id) {      $sql = "SELECT Character_ID FROM ".$GLOBALS["g_ext"].".anons WHERE Anon_ID = '" . addslashes($anon_id) . "'";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      $rec = $this->db->fetch_array($res);        if ($rec["Character_ID"]) {        $sql2 = "SELECT * FROM ".$GLOBALS["g_ext"].".characters WHERE Character_ID = '" . $rec["Character_ID"] . "'";        $this->debug .= $sql2 . "<br>";        $res2 = $this->db->query($sql2);        $rec2 = $this->db->fetch_array($res2);          if ($rec2["Character_ID"]) {          return array($rec2["Region"], $rec2["Server"], $rec2["Toon"]);        } else {          return array(null, null, null);        }      } else {        return array(null, null, null);      }              }     function reset_characterid($z, $r, $n) {      $z = stripslashes($z);      $r = stripslashes($r);      $n = stripslashes($n);      $sql = "SELECT Character_ID, Status FROM ".$GLOBALS["g_ext"].".characters WHERE Region = '" . addslashes(strtolower($z)) . "' AND Server = '" . addslashes(strtolower($r)) . "' AND Toon = '" . addslashes(strtolower($n)) . "'";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      $rec = $this->db->fetch_array($res);            if ($rec["Character_ID"]) {         if ($rec["Status"] == "0") {          $this->sql = "UPDATE LOW_PRIORITY ".$GLOBALS["g_ext"].".characters SET Status = 1 WHERE Character_ID = '" . $rec["Character_ID"] . "'";          register_shutdown_function('queue_background_delete');    #          $sql = "UPDATE ".$GLOBALS["g_ext"].".characters SET Status = 1 WHERE Character_ID = '" . $rec["Character_ID"] . "'";#          $this->debug .= $sql . "<br>";#          $this->db->query($sql);        }      }     }        function delete_characterid_byid($character_id) {      $this->sql = "UPDATE LOW_PRIORITY ".$GLOBALS["g_ext"].".characters SET Status = 0 WHERE Character_ID = '" . $character_id . "'";      register_shutdown_function('queue_background_delete');        }    function queue_background_delete() {      if ($this->sql) {        $this->db->query($this->sql);      }    }            function delete_characterid($z, $r, $n) {      $z = stripslashes($z);      $r = stripslashes($r);      $n = stripslashes($n);      $sql = "SELECT Character_ID FROM ".$GLOBALS["g_ext"].".characters WHERE Region = '" . addslashes(strtolower($z)) . "' AND Server = '" . addslashes(strtolower($r)) . "' AND Toon = '" . addslashes(strtolower($n)) . "'";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      $rec = $this->db->fetch_array($res);            if ($rec["Character_ID"]) {         $this->sql = "UPDATE LOW_PRIORITY ".$GLOBALS["g_ext"].".characters SET Status = 0 WHERE Character_ID = '" . $rec["Character_ID"] . "'";        register_shutdown_function('queue_background_delete');    #        $this->debug .= $sql . "<br>";#        $this->db->query($sql);      }     }        function get_characterinfo($cid) {      $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".characters WHERE Character_ID = '" . addslashes($cid) . "'";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      $rec = $this->db->fetch_array($res);      return $rec;    }        function get_characterid($z, $r, $n, $create=true) {          $z = stripslashes($z);      $r = stripslashes($r);      $n = stripslashes($n);          $sql = "SELECT Character_ID FROM ".$GLOBALS["g_ext"].".characters WHERE Region = '" . addslashes(strtolower($z)) . "' AND Server = '" . addslashes(strtolower($r)) . "' AND Toon = '" . addslashes(strtolower($n)) . "'";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      $rec = $this->db->fetch_array($res);            if ($rec["Character_ID"]) {         return $rec["Character_ID"];      } else {        if ($create) {          $sql = "INSERT INTO ".$GLOBALS["g_ext"].".characters (Region, Server, Toon) VALUES ('" . addslashes(strtolower($z)) . "','" . addslashes(strtolower($r)) . "','" . addslashes(strtolower($n)) . "')";          $this->debug .= $sql . "<br>";          $res = $this->db->query($sql);          if (!$res) {            handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);          } else {            $_id = $this->db->insert_id();            return $_id;          }        } else {          return -1;        }      }    }        function set_summaryinfo($cid, $data, $lvl, $clas, $race, $faction, $bg, $guild) {      if ($cid) {              if (!$data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTER'][0]['ATTRIBUTES']['BATTLEGROUP']) {          $data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTER'][0]['ATTRIBUTES']['BATTLEGROUP'] = $bg;        }              $sql = "UPDATE ".$GLOBALS["g_ext"].".characters SET                 `Class`       = '" . addslashes($clas) . "',                Race        = '" . addslashes($race) . "',                Faction     = '" . addslashes($faction) . "',                Battlegroup = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTER'][0]['ATTRIBUTES']['BATTLEGROUP']) . "',                Guild       = '" . addslashes($guild) . "',                ACHPTS      = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTER'][0]['ATTRIBUTES']['POINTS']) . "', ";                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['CHARACTERBARS'][0]['HEALTH'][0]['ATTRIBUTES']['EFFECTIVE']) {                  $sql .= "HP = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['CHARACTERBARS'][0]['HEALTH'][0]['ATTRIBUTES']['EFFECTIVE']) . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['CHARACTERBARS'][0]['SECONDBAR'][0]['ATTRIBUTES']['TYPE'] == "m") {                  $sql .= "MP = '" . (($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['CHARACTERBARS'][0]['SECONDBAR'][0]['ATTRIBUTES']['TYPE'] == "m") ? addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['CHARACTERBARS'][0]['SECONDBAR'][0]['ATTRIBUTES']['EFFECTIVE']) : "") . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['DEFENSES'][0]['ARMOR'][0]['ATTRIBUTES']['EFFECTIVE']) {                  $sql .= "ARMOR = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['DEFENSES'][0]['ARMOR'][0]['ATTRIBUTES']['EFFECTIVE']) . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BASESTATS'][0]['STAMINA'][0]['ATTRIBUTES']['EFFECTIVE']) {                  $sql .= "STA = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BASESTATS'][0]['STAMINA'][0]['ATTRIBUTES']['EFFECTIVE']) . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BASESTATS'][0]['STRENGTH'][0]['ATTRIBUTES']['EFFECTIVE']) {                  $sql .= "`STR` = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BASESTATS'][0]['STRENGTH'][0]['ATTRIBUTES']['EFFECTIVE']) . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BASESTATS'][0]['INTELLECT'][0]['ATTRIBUTES']['EFFECTIVE']) {                  $sql .= "`INT` = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BASESTATS'][0]['INTELLECT'][0]['ATTRIBUTES']['EFFECTIVE']) . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BASESTATS'][0]['AGILITY'][0]['ATTRIBUTES']['EFFECTIVE']) {                  $sql .= "AGI = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BASESTATS'][0]['AGILITY'][0]['ATTRIBUTES']['EFFECTIVE']) . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BASESTATS'][0]['SPIRIT'][0]['ATTRIBUTES']['EFFECTIVE']) {                  $sql .= "SPI = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BASESTATS'][0]['SPIRIT'][0]['ATTRIBUTES']['EFFECTIVE']) . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['SPELL'][0]['BONUSDAMAGE'][0]['ARCANE'][0]['ATTRIBUTES']['VALUE']) {                  $sql .= "SPDMG = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['SPELL'][0]['BONUSDAMAGE'][0]['ARCANE'][0]['ATTRIBUTES']['VALUE']) . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['SPELL'][0]['BONUSHEALING'][0]['ATTRIBUTES']['VALUE']) {                  $sql .= "HEAL = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['SPELL'][0]['BONUSHEALING'][0]['ATTRIBUTES']['VALUE']) . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['MELEE'][0]['POWER'][0]['ATTRIBUTES']['EFFECTIVE']) {                  $sql .= "AP = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['MELEE'][0]['POWER'][0]['ATTRIBUTES']['EFFECTIVE']) . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['DEFENSES'][0]['RESILIENCE'][0]['ATTRIBUTES']['VALUE']) {                  $sql .= "RESIL = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['DEFENSES'][0]['RESILIENCE'][0]['ATTRIBUTES']['VALUE']) . "', ";                }                if ($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['PVP'][0]['LIFETIMEHONORABLEKILLS'][0]['ATTRIBUTES']['VALUE']) {                  $sql .= "HK = '" . addslashes($data['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['PVP'][0]['LIFETIMEHONORABLEKILLS'][0]['ATTRIBUTES']['VALUE']) . "', ";                }                $sql .= "Level = '" . addslashes($lvl) . "' ";                $sql .= "WHERE Character_ID = '" . addslashes($cid) . "'";        $this->debug .= $sql . "<br>";        $res = $this->db->query($sql);        if (!$res) {          handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);        } else {          $_id = $this->db->insert_id();          return $_id;        }      }        }    ### data_saved functions ##################################################################################    function data_saved_getlist($character_id, $cache_type=1) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".data_saved WHERE Character_ID = '" . addslashes($character_id) . "' AND Cache_Type = '" . addslashes($cache_type) . "' ORDER BY SavedCache_ID DESC";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      return $r;    }    function data_saved_getitem($character_id, $saved_name) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".data_saved WHERE Character_ID = '" . addslashes($character_id) . "' AND Saved_Name = '" . addslashes($saved_name) . "' ORDER BY SavedCache_ID DESC LIMIT 1";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);      return $x;    }    function data_saved_delete($save_id, $claim_id, $member_id) {      $rec = $this->claim_get($claim_id, $member_id);      $dat = $this->db->fetch_array($rec);            if ($dat["Character_ID"]) {        $q = "DELETE FROM ".$GLOBALS["g_ext"].".data_saved WHERE SavedCache_ID = '" . addslashes($save_id) . "' AND Character_ID = '" . addslashes($dat["Character_ID"]) . "' LIMIT 1";        $r = $this->db->query($q);        return $r;      }      }    function data_saved_add($character_id, $saved_name, $saved_desc, $is_private, $xml) {      $gz_xml = gzcompress($xml, 9);          $q = "INSERT INTO ".$GLOBALS["g_ext"].".data_saved (Character_ID, Cache_Type, Cache_Date, Saved_Name, Is_Private, Saved_Description, XML)       VALUES (          '" . addslashes($character_id) . "',          1,          '" . time() . "',          '" . addslashes($saved_name) . "',          '" . addslashes((($is_private=="on")?"1":"0")) . "',          '" . addslashes($saved_desc) . "',          '" . addslashes($gz_xml) . "'      )";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      return $r;    }        function data_saved_links() {      $t = "";      $q = "SELECT Saved_Name FROM ".$GLOBALS["g_ext"].".data_saved WHERE Character_ID = '" . $this->chid . "' AND Is_Private = 0";       $this->debug .= $q . "<br>";      $r = $this->db->query($q);            while ($x = $this->db->fetch_array($r)) {        if (!$t) {          $t = "Saved profiles: ";        }        $ci = $this->get_characterinfo($this->chid);        $t .= "<a class='clnk' href='/" . stripslashes(strtolower($ci["Region"])) . "/" . stripslashes(strtolower(urlencode($ci["Server"]))) . "/" . stripslashes(strtolower($ci["Toon"])) . "/my/" . stripslashes(strtolower(urlencode($x["Saved_Name"]))) . "/'>" . $x["Saved_Name"] . "</a>, ";      }            if ($t) {        $t = substr($t, 0, -2);      }            if ($t) {        return $t;      } else {        return "";      }    }        ### data_archive functions ################################################################################    function data_archive_getlist($character_id, $cache_type=1) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".data_archive WHERE Character_ID = '" . addslashes($character_id) . "' AND Cache_Type = '" . addslashes($cache_type) . "' ORDER BY Archive_ID DESC";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      return $r;    }    function data_archive_getinfo($archive_id) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".data_archive WHERE Archive_ID = '" . addslashes($archive_id) . "'";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);      return $x;    }    function set_cache($z, $r, $n, $xml, $cache_type=1) {      $z = stripslashes($z);      $r = stripslashes($r);      $n = stripslashes($n);      $sql = "        SELECT * FROM        ".$GLOBALS["g_ext"].".data d        INNER JOIN        ".$GLOBALS["g_ext"].".characters c ON        d.Character_ID = c.Character_ID        AND c.Region = '" . addslashes(strtolower($z)) . "'         AND c.Server = '" . addslashes(strtolower($r)) . "'         AND c.Toon = '" . addslashes(strtolower($n)) . "'         AND d.Cache_Type = '" . addslashes($cache_type) . "'         LIMIT 1";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      $rec = $this->db->fetch_array($res);       $_cid = $this->get_characterid($z, $r, $n);        if ($rec["Cache_ID"]) {        $sql = "INSERT INTO ".$GLOBALS["g_ext"].".data_archive (Cache_ID, Character_ID, Cache_Date, Cache_Type, XML)                 SELECT Cache_ID, Character_ID, Cache_Date, Cache_Type, XML FROM ".$GLOBALS["g_ext"].".data                 WHERE Cache_ID = '" . addslashes($rec["Cache_ID"]) . "'";        $this->debug .= $sql . "<br>";        $this->db->query($sql);        $sql = "DELETE FROM ".$GLOBALS["g_ext"].".data WHERE Character_ID = '" . addslashes($_cid) . "' AND Cache_Type = '" . addslashes($cache_type) . "'";        $this->debug .= $sql . "<br>";        $this->db->query($sql);        $_oldid = $rec["Cache_ID"];      } else {        $_oldid = null;      }            $gz_xml = gzcompress($xml, 9);      $sql = "INSERT INTO ".$GLOBALS["g_ext"].".data (Character_ID, Cache_Type, Cache_Date, XML)               VALUES (              '" . addslashes($_cid) . "',              '" . addslashes($cache_type) . "',              '" . time() . "',              '" . addslashes($gz_xml) . "'              )        ";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        $_id = $this->db->insert_id();        return array ($_id, $oldid);      }    }    function check_cache($z, $r, $n, $cache_type=1) {      $z = stripslashes($z);      $r = stripslashes($r);      $n = stripslashes($n);      $max_age = CONTENT_EXPIRE;      $_cid = $this->get_characterid($z, $r, $n);      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".data WHERE Character_ID = '" . addslashes($_cid) . "' AND Cache_Type = '" . addslashes($cache_type) . "' LIMIT 1";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            if ($x["Cache_ID"]) {        $_tim = time();              $GLOBALS["cache_id"] = $x["Cache_ID"];        $GLOBALS["is_cached"] = true;        $GLOBALS["cache_date"] = $x["Cache_Date"];        $unzipped_xml = @gzuncompress($x["XML"]);                if (($_tim - $x["Cache_Date"]) < $max_age) {          return array (1, $x["Cache_ID"], $x["Cache_Date"], stripslashes($unzipped_xml));        } else {          return array (2, $x["Cache_ID"], $x["Cache_Date"], stripslashes($unzipped_xml));        }      } else {        return array (0, null, null, null);      }    }    function get_cache($z, $r, $n, $cache_type=1) {      $_cid = $this->get_characterid($z, $r, $n);      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".data WHERE Character_ID = '" . addslashes($_cid) . "' AND Cache_Type = '" . addslashes($cache_type) . "' LIMIT 1";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            if ($x["Cache_ID"] != "") {        $GLOBALS["cache_id"] = $x["Cache_ID"];        $GLOBALS["is_cached"] = true;        $GLOBALS["cache_date"] = $x["Cache_Date"];        $unzipped_xml = @gzuncompress($x["XML"]);        return stripslashes($unzipped_xml);      } else {        return null;      }    }    function get_class_info($class_name) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".classes WHERE Class_Name = '" . addslashes($class_name) . "'";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            if ($x["Class_Name"]) {        return array ($x["Class_Name"], $x["Class_ID"]);      } else {        return array (null, null);      }    }        function get_talentgrid($class_id) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".talents WHERE Class_ID = '" . addslashes($class_id) . "' AND Build = '" . TALENT_BUILD . "'";      $this->debug .= $q . "<br>";       $r = $this->db->query($q);            while ( $y = $this->db->fetch_array($r) ) {          $_tSID[$y["Panel"]][$y["Row"]][$y["Col"]] = $y["Talent_Slot_ID"];          $_talentname[$y["Panel"]][$y["Row"]][$y["Col"]] = $y["Talent_Name"];          $_maxpoints[$y["Panel"]][$y["Row"]][$y["Col"]] = $y["Max_Points"];          $_spellurls[$y["Panel"]][$y["Row"]][$y["Col"]][1] = $y["Spell_URL_1"];          $_spellurls[$y["Panel"]][$y["Row"]][$y["Col"]][2] = $y["Spell_URL_2"];          $_spellurls[$y["Panel"]][$y["Row"]][$y["Col"]][3] = $y["Spell_URL_3"];          $_spellurls[$y["Panel"]][$y["Row"]][$y["Col"]][4] = $y["Spell_URL_4"];          $_spellurls[$y["Panel"]][$y["Row"]][$y["Col"]][5] = $y["Spell_URL_5"];      }      return array ($_tSID, $_talentname, $_maxpoints, $_spellurls);    }    function get_xml($url, $z="", $r="", $n="", $cache_type=1) {      $headers[0] = "Accept: text/xml,application/xml,application/xhtml+xml,";      $headers[0] .= "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";      $headers[] = "Cache-Control: max-age=0";      $headers[] = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7";      $headers[] = "Accept-Language: en-us,en;q=0.5";      $headers[] = "Pragma: ";              $handle = curl_init();      curl_setopt($handle, CURLOPT_URL, $url);      curl_setopt($handle, CURLOPT_HTTPHEADER, $headers);      curl_setopt($handle, CURLOPT_REFERER, 'http://www.worldofwarcraft.com');      curl_setopt($handle, CURLOPT_RETURNTRANSFER, 1);      curl_setopt($handle, CURLOPT_ENCODING, 'gzip,deflate');      curl_setopt($handle, CURLOPT_AUTOREFERER, true);      curl_setopt($handle, CURLOPT_TIMEOUT, 2);      curl_setopt($handle, CURLOPT_CONNECTTIMEOUT, 2);      curl_setopt($handle, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6');      curl_setopt($handle, CURLOPT_HEADER, 0);      if (($content = curl_exec($handle)) === false) {        curl_close($handle);        $mirror_content = trim($this->parse_mirror($z, $r, $n, $cache_type));        if ($mirror_content) {          return array (119, stripslashes($mirror_content));        } else {          $content = $this->get_cache($z, $r, $n, $cache_type);          if ($content) {            return array (101, stripslashes($content));          } else {            $this->print_header_info($nul);            echo "<br /><br /><br /><div class=sub3>Armory Error - [Unreachable, no cache found [130].]</div>";            $this->print_footer_info($nul);            exit;          }                    }      } else {        #echo "check for 503..<br>";        $_loc = strrpos($content, "\"503\"");        if ($_loc) {           #echo "503 found..<br>";          curl_close($handle);          $mirror_content = trim($this->parse_mirror($z, $r, $n, $cache_type));          if ($mirror_content) {            return array (109, stripslashes($mirror_content));          } else {            $this->print_header_info($nul);            echo "<br /><br /><br /><div class=sub3>Armory Error - [Unreachable, no cache found [130].]</div>";            $this->print_footer_info($nul);          }        } else {          #echo "503 not found..<br>";          curl_close($handle);          return array (100, stripslashes($content));        }      }    }    function parse_mirror($z, $r, $n, $cache_type, $x="") {      $mirror_content = null;      $aq = "SELECT * FROM ".$GLOBALS["g_ext"].".mirrors WHERE Version >= '" . addslashes(MIRROR_VERSION) . "' ORDER BY rand()";      $this->debug .= $aq . "<br>";      $ar = $this->db->query($aq);            while ($ax = $this->db->fetch_array($ar)) {        if ($x) {          $mirror_url = $ax["Mirror_URL"] . "?v=" . MIRROR_VERSION . "&z=" . urlencode(stripslashes($z)) . "&r=" . urlencode(stripslashes($r)) . "&n=" . urlencode(stripslashes($n)) . "&t=" . urlencode($cache_type) . "&x=" . urlencode(stripslashes($x));        } else {          $mirror_url = $ax["Mirror_URL"] . "?v=" . MIRROR_VERSION . "&z=" . urlencode(stripslashes($z)) . "&r=" . urlencode(stripslashes($r)) . "&n=" . urlencode(stripslashes($n)) . "&t=" . urlencode($cache_type);        }        $mirror_content = trim($this->get_xml_raw($mirror_url));        $mirror_content = trim(str_replace("|","",$mirror_content));        ## split after </page>        $tc = split("<\/page\>", $mirror_content);        if ($tc[0]) {          $_pos = strpos($tc[0], "</page>");          if ($_pos === false) {              $mirror_content = trim($tc[0] . "</page>");          } else {              $mirror_content = trim($tc[0]);          }        } else {          $mirror_content = trim($mirror_content);        }        if (trim($mirror_content)) {          $_loc = strrpos($mirror_content, "error503");          if ($_loc) {             ## error, we want to continue..            $mirror_content = "";          } else {            ## no error, break out..            break;          }        }       }            return $mirror_content;          }  	function get_xml_raw($url) {      $handle = curl_init($url);      $headers = array('Accept: text/xml,application/xml,application/xhtml+xml');      curl_setopt($handle, CURLOPT_HEADER, 0);      curl_setopt($handle, CURLOPT_RETURNTRANSFER, 1);      curl_setopt($handle, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6');      curl_setopt($handle, CURLOPT_HTTPHEADER, $headers);      curl_setopt($handle, CURLOPT_CONNECTTIMEOUT, 15);      curl_setopt($handle, CURLOPT_TIMEOUT, 15);           if (($content = curl_exec($handle)) === false) {        curl_close($handle);        return null;      } else {        curl_close($handle);        return $content;      }    }    function get_cachecount() {      $q = "SELECT MAX(Cache_ID) AS 'cachecount' FROM ".$GLOBALS["g_ext"].".data";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);      return $x["cachecount"];    }        function cache_nav($zone, $server, $perpage, $cur, $sort="n") {      $tmp = "";      if ($server == "*") {        $q = "          SELECT COUNT(*) AS 'cachecount'          FROM          ".$GLOBALS["g_ext"].".characters c          WHERE c.Region = '" . addslashes(strtolower($zone)) . "'         ";      } else {        $q = "          SELECT COUNT(*) AS 'cachecount'          FROM          ".$GLOBALS["g_ext"].".characters c          WHERE c.Region = '" . addslashes(strtolower($zone)) . "'           AND c.Server = '" . addslashes(strtolower($server)) . "'         ";      }      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            $tot = $x["cachecount"];      $pages = floor($tot / $perpage);            if ($cur == 0) {        $tmp = "1 ";      } else {        $tmp = "<a href=\"/browse/" . strtolower(urlencode(stripslashes($zone))) . "/" . strtolower(urlencode(stripslashes($server))) . "/0/" . $sort . "\">1</a> ";      }            for ($i = 1; $i <= $pages; $i++) {        if ($cur == ($perpage*$i)) {          $tmp .= " " . ($i+1). " ";                } else {          $tmp .= "<a href=\"/browse/" . strtolower(urlencode(stripslashes($zone))) . "/" . strtolower(urlencode(stripslashes($server))) . "/" . ($perpage*$i) . "/" . $sort . "\">" . ($i+1) . "</a> ";        }      }            $tmp .= " (" . $tot . " Total)";      return $tmp;    }    function browse_cache($zone, $server, $start, $cnt, $sortby="", $direct="ASC") {      if ($server == "*") {        $regcmd = " c.Region = '" . addslashes(strtolower($zone)) . "' ";      } else {        $regcmd = " c.Region = '" . addslashes(strtolower($zone)) . "' AND c.Server = '" . addslashes(strtolower($server)) . "' ";      }      $limit = " LIMIT " . $start . ", " . $cnt;      if ($sortby) {        switch (strtolower($sortby)) {          case "toon":                    $sort = " ORDER BY " . addslashes($sortby) . " " . addslashes($direct) . ", Score DESC ";            break;          case "class":                    $sort = " ORDER BY " . addslashes($sortby) . " " . addslashes($direct) . ", Score DESC, Toon ASC ";            break;          case "level":                    $sort = " ORDER BY " . addslashes($sortby) . " " . addslashes($direct) . ", Score DESC, Toon ASC ";            break;          case "faction":                    $sort = " ORDER BY " . addslashes($sortby) . " " . addslashes($direct) . ", Score DESC, Toon ASC ";            break;          case "guild":                    $sort = " ORDER BY " . addslashes($sortby) . " " . addslashes($direct) . ", Score DESC, Toon ASC ";            break;          case "score":                    $sort = " ORDER BY " . addslashes($sortby) . " " . addslashes($direct) . ", Toon ASC ";            break;        }      } else {       $sort = " ORDER BY Toon " . addslashes($direct);      }      $q = "        SELECT        	*        FROM        	".$GLOBALS["g_ext"].".characters c        WHERE           c.Status <> 0        AND        " . $regcmd . " " . $sort . " " . $limit;      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      return $r;          }    function itemsuffix_getdetail($suffix_id) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".item_suffix WHERE Suffix_ID = '" . addslashes($suffix_id) . "' LIMIT 1";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            if ($x["Suffix_ID"]) {        return array($x["Suffix_ID"], $x["Suffix_Name"]);      } else {        return array(null, null);      }    }    function enchant_getdetail($spell_id) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".enchants WHERE Spell_ID = '" . addslashes($spell_id) . "' LIMIT 1";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            if ($x["Spell_ID"]) {        return array($x["Spell_ID"], $x["Spell_Name"], $x["URL"]);      } else {        return array(null, null, null);      }    }    function get_enchant($spell_id) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".enchants WHERE Spell_ID = '" . addslashes($spell_id) . "' LIMIT 1";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            if ($x["Spell_ID"] != "") {        return "<a href=\"" . $x["URL"] . "\">" . $x["Spell_Name"] . " &gt;&nbsp;&nbsp;</a>";      } else {        $q = "INSERT INTO ".$GLOBALS["g_ext"].".todo (Enchant_ID, URL, Type) VALUES ('" . addslashes($spell_id) . "','" . addslashes($this->lite_url) . "', 1)";        $this->debug .= $q . "<br>";        $this->db->query($q);        return "Enchant: " . $spell_id;      }    }    function get_suffix($suffix_id) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".item_suffix WHERE Suffix_ID = '" . addslashes($suffix_id) . "' LIMIT 1";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            if ($x["Suffix_ID"] != "") {        return " " . $x["Suffix_Name"];      } else {        $q = "INSERT INTO ".$GLOBALS["g_ext"].".todo (Enchant_ID, URL, Type) VALUES ('" . addslashes($suffix_id) . "','" . addslashes($this->lite_url) . "', 2)";        $this->debug .= $q . "<br>";        $this->db->query($q);        return " (" . $suffix_id . ")";      }    }    function get_item($item_id) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".items WHERE Item_ID = '" . addslashes($item_id) . "' LIMIT 1";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            if ($x["Item_ID"] != "") {        return array ($x["Item_ID"], $x["Item_Name"], $x["Item_Quality"], $x["Item_iLevel"], $x["Item_Icon"], $x["Item_Slot"]);      } else {        return array (null, null, null, null, null, null);      }    }    function add_item($item_id, $item_name, $item_quality, $item_ilevel, $item_icon, $slot_id) {      $q = "INSERT INTO ".$GLOBALS["g_ext"].".items (Item_ID, Item_Name, Item_Quality, Item_iLevel, Item_Icon, Item_Slot)            VALUES (            '" . addslashes($item_id) . "',                        '" . addslashes($item_name) . "',                        '" . addslashes($item_quality) . "',            '" . addslashes($item_ilevel) . "',            '" . addslashes($item_icon) . "',            '" . addslashes($slot_id) . "'            )            ";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      if (!$r) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        $_id = $this->db->insert_id();        return $_id;      }    }  	function set_item($item_id) {  		$item_xml = $this->get_xml_raw("http://www.wowhead.com/item=" . $item_id . "&xml");  		$xmlparse = &new ParseXML;  		$xml = $xmlparse->GetXMLTree($item_xml);  		  		if ($xml['WOWHEAD'][0]['ITEM'][0]['ATTRIBUTES']['ID']) {        $_item_id = $this->add_item(          $xml['WOWHEAD'][0]['ITEM'][0]['ATTRIBUTES']['ID'],           $xml['WOWHEAD'][0]['ITEM'][0]['NAME'][0]['VALUE'],          $xml['WOWHEAD'][0]['ITEM'][0]['QUALITY'][0]['ATTRIBUTES']['ID'],          $xml['WOWHEAD'][0]['ITEM'][0]['LEVEL'][0]['VALUE'],          $xml['WOWHEAD'][0]['ITEM'][0]['ICON'][0]['VALUE'],          $xml['WOWHEAD'][0]['ITEM'][0]['INVENTORYSLOT'][0]['ATTRIBUTES']['ID']        );        return array (          $xml['WOWHEAD'][0]['ITEM'][0]['ATTRIBUTES']['ID'],           $xml['WOWHEAD'][0]['ITEM'][0]['NAME'][0]['VALUE'],          $xml['WOWHEAD'][0]['ITEM'][0]['QUALITY'][0]['ATTRIBUTES']['ID'],          $xml['WOWHEAD'][0]['ITEM'][0]['LEVEL'][0]['VALUE'],          $xml['WOWHEAD'][0]['ITEM'][0]['ICON'][0]['VALUE'],          $xml['WOWHEAD'][0]['ITEM'][0]['INVENTORYSLOT'][0]['ATTRIBUTES']['ID']        );      } else {        return array (null, null, null, null, null);      }  	}    #############################################################################################    ### armory search functions #################################################################    function search_armory($z, $r, $n) {      echo "z->" . $z . "<br>";      echo "r->" . $r . "<br>";      echo "n->" . $n . "<br>";    }    #############################################################################################    ### gear score functions ####################################################################        function summary_get_gear_score_overall($z, $r, $n=5) {      if ($z == "all") {        if ($r == "all") {          $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters c WHERE c.Status > 0 ORDER BY c.Score DESC LIMIT " . $n;        } else {          $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters cv WHERE cv.Status > 0 AND cv.Region = '" . addslashes($r) . "' ORDER BY cv.Score DESC LIMIT " . $n;        }      } else {        if ($r == "all") {          $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters ce WHERE ce.Status > 0 AND ce.Region = '" . addslashes($z) . "' ORDER BY ce.Score DESC LIMIT " . $n;        } else {#          $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters c USE INDEX (Region_Server_Score) WHERE c.Status > 0 AND c.Region = '" . addslashes($z) . "' AND c.Server = '" . addslashes($r) . "' ORDER BY c.Score DESC LIMIT " . $n;          $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters c USE INDEX (Region_Server_Toon_Score) WHERE c.Status > 0 AND c.Region = '" . addslashes($z) . "' AND c.Server = '" . addslashes($r) . "' ORDER BY c.Score DESC LIMIT " . $n;        }      }      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      return $r;        }    function summary_get_gear_score_class($z, $r, $c, $n=5) {      $_classname = $this->get_class($c);      if ($_classname) {        $fsql = " AND Class = '" . addslashes($_classname) . "' ";      }      if ($z == "all") {        if ($r == "all") {          $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters c WHERE c.Status > 0 " . $fsql . " ORDER BY c.Score DESC LIMIT " . $n;        } else {          $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters c WHERE c.Status > 0 AND c.Region = '" . addslashes($r) . "' " . $fsql . " ORDER BY c.Score DESC LIMIT " . $n;        }      } else {        if ($r == "all") {          $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters c WHERE c.Status > 0 AND c.Region = '" . addslashes($z) . "'" . $fsql . " ORDER BY c.Score DESC LIMIT " . $n;        } else {          $q = "SELECT * FROM ".$GLOBALS["g_ext"].".scores s INNER JOIN ".$GLOBALS["g_ext"].".characters c ON c.Character_ID = s.Character_ID INNER JOIN ".$GLOBALS["g_ext"].".summary u ON u.Character_ID = c.Character_ID WHERE c.Status > 0 AND c.Region = '" . addslashes($z) . "' AND c.Server = '" . addslashes($r) . "' " . $fsql . " ORDER BY s.Score DESC LIMIT " . $n;        }      }          $q = "";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      return $r;        }                function update_gear_score($z, $r, $n, $t) {      if ($this->gear_score) {        if (!$this->is_archive) {          $_cid = $this->get_characterid($z, $r, $n);          if ($_cid) {            $q = "UPDATE ".$GLOBALS["g_ext"].".characters SET Score = '" . addslashes($this->gear_score) . "' WHERE Character_ID = '" . $_cid . "'";            $this->debug .= $q . "<br>";            $this->db->query($q);          }              }      }    }    function browse_gear_scores($z, $r, $filter="") {            $fsql = "";      if ($filter) {        if ($filter != "all") {          $_classname = $this->get_class($filter);          if ($_classname) {            $fsql = " Class = '" . addslashes($_classname) . "' ";          }        }      }          if ($z == "all") {        $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters c WHERE c.Score > 0 AND c.Status > 0 " . (($fsql) ? " AND " . $fsql : "") . " ORDER BY c.Score DESC LIMIT 300";      } else if ($r == "all") {        $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters cx WHERE cx.Score > 0 AND cx.Status > 0 " . (($fsql) ? " AND " . $fsql . " AND " : " AND ") . " cx.Region = '" . addslashes($z) . "' ORDER BY cx.Score DESC LIMIT 300";      } else {#        $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters ca USE INDEX (Region_Server_Score) WHERE ca.Score > 0 AND ca.Status > 0 " . (($fsql) ? " AND " . $fsql . " AND " : " AND ") . " ca.Region = '" . addslashes($z) . "' AND ca.Server = '" . addslashes($r) . "' ORDER BY ca.Score DESC LIMIT 300";        $q = "SELECT * FROM ".$GLOBALS["g_ext"].".characters ca USE INDEX (Region_Server_Toon_Score) WHERE ca.Score > 0 AND ca.Status > 0 " . (($fsql) ? " AND " . $fsql . " AND " : " AND ") . " ca.Region = '" . addslashes($z) . "' AND ca.Server = '" . addslashes($r) . "' ORDER BY ca.Score DESC LIMIT 300";      }      $this->debug .= $q . "<br>";      $rs = $this->db->query($q);      return $rs;    }    function get_gear_score($chid, $t) {      $_cid = $chid;      $q = "SELECT Score FROM ".$GLOBALS["g_ext"].".characters WHERE Character_ID = '" . addslashes(strtolower($_cid)) . "'";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            if ($x["Score"]) {        return array ($x["Score"], $x["Score"]);      } else {        return array (null, null);      }    }            function gearscore_color($score) {      $_qual = 0;      if ($score >= 5800) {        $_qual = 5;      } else if ( ($score < 5800) && ($score >= 4800) ) {        $_qual = 4;      } else if ( ($score < 4800) && ($score >= 3800) ) {        $_qual = 3;      } else if ( ($score < 3800) && ($score >= 2800) ) {        $_qual = 2;      } else if ( ($score < 2800) ) {        $_qual = 1;      }      return $_qual;    }        function calculate_gear_score_weapons() {            $tg = false;      $md = 0;      if (($this->mh_s == 17) && ($this->oh_s > 0)) {        $md_1 = floor($this->mh_v - ($this->mh_v*.10));        $tg = true;      }       if (($this->oh_s == 17) && ($this->mh_s > 0)) {                $md_2 = floor($this->oh_v - ($this->oh_v*.10));        $tg = true;      }       if ($tg) {        if ($md_1 > $md_2) {          $md = $md_1;        } else {          $md = $md_2;        }      }            if ($tg) {        $this->gear_score = floor($this->gear_score - $md);      }       }        function calculate_gear_score($item, $ilvl, $ourlvl, $quality, $slot, $realslot=0) {      $tmp = ($ilvl);            #echo $item . "|" . $ilvl . "|" . $ourlvl . "|" . $quality . "|" . $slot . "|" . $realslot . "<br>";            if ($slot == 17) {          $tmp = ($tmp*2);      }      switch ($quality) {        case "1":          $tmp = $tmp*0.25;          break;        case "2":          $tmp = $tmp*0.5;          break;        case "3":          $tmp = $tmp*0.75;          break;        case "4":          $tmp = $tmp*1;          break;        case "5":          $tmp = $tmp*1.25;          break;      }      switch ($item) {        case "1": // item          $tmp = $tmp;          break;        case "2": // gem          $tmp = $tmp*0.05;          break;        case "3": // enchant          $tmp = $tmp*0.20;          break;      }      if ($slot == "4")  { $tmp = 0; }      if ($slot == "19") { $tmp = 0; }            if (($realslot == 15) && ($slot > 0)) {        $this->mh_v = $tmp;        $this->mh_s = $slot;      }      if (($realslot == 16) && ($slot > 0))  {        $this->oh_v = $tmp;        $this->oh_s = $slot;      }            #echo $tmp . "<br><br>";      $this->gear_score = floor($this->gear_score + $tmp);    }        function get_abbr($str) {      $arr = split(" ", $str);      $tt = "";      for ($i = 0; $i < count($arr); $i++) {        if (strtolower($arr[$i]) != "of") {          $tt .= strtoupper(substr($arr[$i],0,1));            }      }      if (strlen($tt) > 3) {        $tt = substr($tt, 0, 3);      }      return $tt;    }    function print_buff_info() {      $tt = "";      if (is_array($this->xml['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BUFFS'][0]['SPELL'])) {        foreach ( $this->xml['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['BUFFS'][0]['SPELL'] as $pkey => $pvalue ) {          $tt .= "<div title=\"" . $pvalue['ATTRIBUTES']['NAME'] . "\" class=\"buff_block\">" . $this->get_abbr($pvalue['ATTRIBUTES']['NAME']) . "</div>" . r;        }      }       return $tt;    }    function print_header_info($page_title="") {      if (!$page_title) {        if (!$this->anon) {          $page_title = stripslashes($this->xml['PAGE'][0]['CHARACTERINFO'][0]['CHARACTER'][0]['ATTRIBUTES']['NAME'] . " of "  . $this->xml['PAGE'][0]['CHARACTERINFO'][0]['CHARACTER'][0]['ATTRIBUTES']['REALM']);          } else {          $page_title = "Anonymous Profile";        }      }      include("header.php");    }        function print_footer_info() {      include("footer.php");     }    ### shortname functions #######################################################################################        function shortname_getname($character_id) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".shortnames WHERE Character_ID = '" . $character_id . "'";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);      return $x["Shortname"];    }    function shortname_add($shortname, $character_id, $member_id, $del_first) {        if ($del_first == 1) {        $q = "DELETE FROM ".$GLOBALS["g_ext"].".shortnames WHERE Character_ID = '" . addslashes($character_id) . "'";        $this->debug .= $q . "<br>";        $r = $this->db->query($q);      }      $_url = $this->shortname_check($shortname);            if (!$_url) {        $q = "INSERT INTO ".$GLOBALS["g_ext"].".shortnames (Shortname, Character_ID, Member_ID) VALUES ('" . addslashes($shortname) . "','" . addslashes($character_id) . "','" . addslashes($member_id) . "')";        $this->debug .= $q . "<br>";        $r = $this->db->query($q);        if (!$r) {          handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);        }        $_id = $this->db->insert_id();        if ($_id) {          return $_id;        } else {          return 0;        }      } else {        return 0;      }    }    function shortname_check($shortname) {      $q = "SELECT Character_ID FROM ".$GLOBALS["g_ext"].".shortnames WHERE Shortname = '" . addslashes(strtolower($shortname)) . "'";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            if ($x["Character_ID"]) {        $rec = $this->get_characterinfo($x["Character_ID"]);        if ($rec) {          $url = "http://armorylite.com/" . strtolower($rec["Region"]) . "/" . strtolower($rec["Server"]) . "/" . strtolower($rec["Toon"]) . "/";                  return $url;        } else {          return "";        }      } else {        return "";      }    }        function get_icon($icon_name) {      if (trim($icon_name) == "") {        $icon_name = "INV_Misc_QuestionMark";            }          $local_path = ICON_SERVER_PATH.strtolower($icon_name).".jpg";      $web_path   = ICON_WEB_PATH.strtolower($icon_name).".jpg";      if (file_exists($local_path)) {        return $web_path;              } else {        $wowhead_img = "http://static.wowhead.com/images/wow/icons/medium/" . strtolower($icon_name) . ".jpg";                $ch = curl_init();        curl_setopt ($ch, CURLOPT_URL, $wowhead_img);        curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);        curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, 0);        $fc = curl_exec($ch);        curl_close($ch);            $new_img = @imagecreatefromstring($fc);        @imagejpeg($new_img, $local_path, 100);        return $web_path;      }           }        function counter_show($chid) {      $q = "SELECT Count_Value FROM ".$GLOBALS["g_ext"].".counters WHERE Character_ID = '" . $chid . "'";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);      if ($x["Count_Value"]) {        $q = "UPDATE ".$GLOBALS["g_ext"].".counters SET Count_Value = Count_Value+1 WHERE Character_ID = '" . $chid . "'";        $this->debug .= $q . "<br>";        $r = $this->db->query($q);        return number_format(($x["Count_Value"]+1));                  } else {        $q = "INSERT INTO ".$GLOBALS["g_ext"].".counters (Character_ID, Count_Value) VALUES ('" . $chid . "','1')";        $this->debug .= $q . "<br>";        $r = $this->db->query($q);        return 1;                  }    }        function comments_get($chid, $start=0) {      if (!is_numeric($start)) {        $start = 0;      }          $q = "SELECT * FROM ".$GLOBALS["g_ext"].".comments WHERE Character_ID = '" . $chid . "' AND Comment_Type > -1 ORDER BY Comment_ID DESC LIMIT " . $start . ", " . NOTES_PER_PAGE;      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      return $r;    }    function comments_nav($chid, $cur=0, $base_url) {      $tmp = "";      $q = "        SELECT COUNT(*) AS 'notecount'        FROM        ".$GLOBALS["g_ext"].".comments c        WHERE Character_ID = '" . $chid . "' AND Comment_Type > -1      ";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            $tot = $x["notecount"];      $pages = floor($tot / NOTES_PER_PAGE);            if ($cur == 0) {        $tmp = " <span class='botnav_on'>1</span> ";      } else {        $tmp = " <a href=\"" . $base_url . "/n/0/\">1</a> ";      }      for ($i = 1; $i <= $pages; $i++) {        if ($cur == (NOTES_PER_PAGE * $i)) {          $tmp .= " <span class='botnav_on'>" . ($i+1). "</span> ";                } else {          $tmp .= " <a href=\"" . $base_url . "/n/" . (NOTES_PER_PAGE * $i) . "\">" . ($i+1) . "</a> ";        }      }      $tmp .= " (" . $tot . " Total)";      return $tmp;    }        function comments_add($chid, $member_id, $subject, $body, $comment_type) {      $tim = time();      $q = "INSERT INTO ".$GLOBALS["g_ext"].".comments (Character_ID, Member_ID, Subject, Comment_Date, Comment_Type, Body)             VALUES (              '" . $chid . "',              '" . $member_id . "',             '" . addslashes($subject) . "',              '" . $tim . "',              '" . $comment_type . "',              '" . addslashes($body) . "')";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      if (!$r) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {       $_id = $this->db->insert_id();        return $_id;      }    }    function gear_history_process($chid, $slot_id, $item_id) {      $tim = time();      $q = "SELECT Item_ID FROM ".$GLOBALS["g_ext"].".gear_history WHERE Character_ID = '" . $chid . "' AND Slot_ID = '" . $slot_id . "' AND Status = 1";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);      if ((!$x["Item_ID"]) || ($x["Item_ID"] != $item_id)) {        $q = "UPDATE ".$GLOBALS["g_ext"].".gear_history SET Status = 0 WHERE Character_ID = '" . $chid. "' AND Slot_ID = '" . $slot_id . "'";        $this->debug .= $q . "<br>";        $r = $this->db->query($q);        $qt = "SELECT Item_ID FROM ".$GLOBALS["g_ext"].".gear_history WHERE Character_ID = '" . $chid . "' AND Slot_ID = '" . $slot_id . "' AND Item_ID = '" . $item_id . "'";        $this->debug .= $qt . "<br>";        $rt = $this->db->query($qt);        $xt = $this->db->fetch_array($rt);                if ($xt["Item_ID"]) {                } else {          $q = "INSERT INTO ".$GLOBALS["g_ext"].".gear_history (Character_ID, Slot_ID, Item_ID, Status, History_Date) VALUES ('" . $chid . "','" . $slot_id . "','" . $item_id . "','1','" . $tim . "')";          $this->debug .= $q . "<br>";          $r = $this->db->query($q);            list ($_itemid, $_itemname, $_quality, $_ilvl, $_icon, $_slot) = $this->get_item($item_id);          if (!$_itemname) {            list ($_itemid, $_itemname, $_quality, $_ilvl, $_icon, $_slot) = $this->get_item($x["Item_ID"]);            $_body = "Unquipped item: <span class='qual_" . $_quality . "'><a href='http://www.wowhead.com/?item=" . $_itemid . "'>[" . $_itemname . "]</a> - did not equip new item.</span>";          } else {            $_body = "Equipped new item: <span class='qual_" . $_quality . "'><a href='http://www.wowhead.com/?item=" . $_itemid . "'>[" . $_itemname . "]</a></span>";          }          $comment_id = $this->comments_add($chid, 0, 'gear change', $_body, 0);        }      }    }    function print_gear_info($slot_id, $short_name, $class_id="") {      $match = 0;      $tt = "";        if (is_array($this->xml['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['ITEMS'][0]['ITEM'])) {        foreach ( $this->xml['PAGE'][0]['CHARACTERINFO'][0]['CHARACTERTAB'][0]['ITEMS'][0]['ITEM'] as $pkey => $pvalue ) {          if ($pvalue['ATTRIBUTES']['SLOT'] == $slot_id) {            #### item ####################################################################################################            list ($_main_item_id, $_main_item_name, $_main_item_quality, $_main_item_ilevel, $_main_item_icon, $_main_item_slot) = $this->get_item($pvalue['ATTRIBUTES']['ID']);            if (!$_main_item_id) {              list ($_main_item_id, $_main_item_name, $_main_item_quality, $_main_item_ilevel, $_main_item_icon, $_main_item_slot) = $this->set_item($pvalue['ATTRIBUTES']['ID']);            }            if (!$_main_item_name) {              ## this is caused by a new or unknown item.. we need to display defaults..              $_main_item_name = "Unknown " . $pvalue['ATTRIBUTES']['ID'];              $_main_item_quality = "1";            }            #### check slot history ...            if (!$this->is_archive) {              $this->gear_history_process($this->chid, $slot_id, $_main_item_id);            }                        #### check icon -> we want to use wowhead icon..            $icon_url = $this->get_icon($_main_item_icon);                        #### figure out iLvl gear score..            $this->calculate_gear_score(1, $_main_item_ilevel, $this->xml['PAGE'][0]['CHARACTERINFO'][0]['CHARACTER'][0]['ATTRIBUTES']['LEVEL'], $_main_item_quality, $_main_item_slot, $pvalue['ATTRIBUTES']['SLOT']);                                if ($_COOKIE["armorylite_img"] == "n") {              $tt = "<div class=\"slot slot_" . $_main_item_quality . " slot_color_" . $_main_item_quality . " " . (($class_id!="") ? " " . $class_id . " " : "") . "\">";            } else {              $tt = "<div class=\"slot slot_" . $_main_item_quality . " slot_color_" . $_main_item_quality . " " . (($class_id!="") ? " " . $class_id . " " : "") . "\">";            }            $tt .= "<div class=\"alink\" id=\"cnt_" . $slot_id . "\">";            $match = 1;            if ($pvalue['ATTRIBUTES']['RANDOMPROPERTIESID'] != 0) {              $suffix = $this->get_suffix($pvalue['ATTRIBUTES']['RANDOMPROPERTIESID']);            } else {              $suffix = "";            }            $tt .= "<div class=\"main_link_" . $_main_item_quality . "\"><a href=\"http://www.wowhead.com/?item=" . $_main_item_id . "\">" . $_main_item_name . $suffix . " &gt;&nbsp;&nbsp;</a></div>";            #### gem 0 ###################################################################################################            if ($pvalue['ATTRIBUTES']['GEM0ID'] > 0) {              list ($_gem0_item_id, $_gem0_item_name, $_gem0_item_quality, $_gem0_item_ilevel, $_gem0_item_icon, $_gem0_item_slot) = $this->get_item($pvalue['ATTRIBUTES']['GEM0ID']);              if (!$_gem0_item_id) {                list ($_gem0_item_id, $_gem0_item_name, $_gem0_item_quality, $_gem0_item_ilevel, $_gem0_item_icon, $_gem0_item_slot) = $this->set_item($pvalue['ATTRIBUTES']['GEM0ID']);              }              $this->calculate_gear_score(2, $_gem0_item_ilevel, $this->xml['PAGE'][0]['CHARACTERINFO'][0]['CHARACTER'][0]['ATTRIBUTES']['LEVEL'], $_gem0_item_quality, $_gem0_item_slot, $pvalue['ATTRIBUTES']['SLOT']);              $tt .= "<div class=\"gem_link_" . $_gem0_item_quality . "\"><a href=\"http://www.wowhead.com/?item=" . $_gem0_item_id . "\">" . $_gem0_item_name . " &gt;&nbsp;&nbsp;</a></div>";            }            #### gem 1 ###################################################################################################            if ($pvalue['ATTRIBUTES']['GEM1ID'] > 0) {              list ($_gem1_item_id, $_gem1_item_name, $_gem1_item_quality, $_gem1_item_ilevel, $_gem1_item_icon, $_gem1_item_slot) = $this->get_item($pvalue['ATTRIBUTES']['GEM1ID']);              if (!$_gem1_item_id) {                list ($_gem1_item_id, $_gem1_item_name, $_gem1_item_quality, $_gem1_item_ilevel, $_gem1_item_icon, $_gem1_item_slot) = $this->set_item($pvalue['ATTRIBUTES']['GEM1ID']);              }              $this->calculate_gear_score(2, $_gem1_item_ilevel, $this->xml['PAGE'][0]['CHARACTERINFO'][0]['CHARACTER'][0]['ATTRIBUTES']['LEVEL'], $_gem1_item_quality, $_gem1_item_slot, $pvalue['ATTRIBUTES']['SLOT']);              $tt .= "<div class=\"gem_link_" . $_gem1_item_quality . "\"><a href=\"http://www.wowhead.com/?item=" . $_gem1_item_id . "\">" . $_gem1_item_name . " &gt;&nbsp;&nbsp;</a></div>";            }            #### gem 1 ###################################################################################################            if ($pvalue['ATTRIBUTES']['GEM2ID'] > 0) {              list ($_gem2_item_id, $_gem2_item_name, $_gem2_item_quality, $_gem2_item_ilevel, $_gem2_item_icon, $_gem2_item_slot) = $this->get_item($pvalue['ATTRIBUTES']['GEM2ID']);              if (!$_gem2_item_id) {                list ($_gem2_item_id, $_gem2_item_name, $_gem2_item_quality, $_gem2_item_ilevel, $_gem2_item_icon, $_gem2_item_slot) = $this->set_item($pvalue['ATTRIBUTES']['GEM2ID']);              }              $this->calculate_gear_score(2, $_gem2_item_ilevel, $this->xml['PAGE'][0]['CHARACTERINFO'][0]['CHARACTER'][0]['ATTRIBUTES']['LEVEL'], $_gem2_item_quality, $_gem2_item_slot, $pvalue['ATTRIBUTES']['SLOT']);              $tt .= "<div class=\"gem_link_" . $_gem2_item_quality . "\"><a href=\"http://www.wowhead.com/?item=" . $_gem2_item_id . "\">" . $_gem2_item_name . " &gt;&nbsp;&nbsp;</a></div>";            }            #### enchant ##################################################################################################            if ($pvalue['ATTRIBUTES']['PERMANENTENCHANT'] > 0) {              $tt .= "<div class=\"enchant_link\">" . $this->get_enchant($pvalue['ATTRIBUTES']['PERMANENTENCHANT']) . "</div>";            }            #### item level ###############################################################################################            if ($_main_item_ilevel) {              $tt .= "<div class=\"dur_link\">iLevel: " . $_main_item_ilevel . "&nbsp;&nbsp;</div>";            }            #### durability ###############################################################################################            if ($pvalue['ATTRIBUTES']['MAXDURABILITY'] > 0) {              $tt .= "<div class=\"dur_link\">Durability: " . $pvalue['ATTRIBUTES']['DURABILITY'] . "/" . $pvalue['ATTRIBUTES']['MAXDURABILITY'] . "&nbsp;&nbsp;</div>";            }            $tt .= "</div>";          }        }        if ($_COOKIE["armorylite_img"] == "n") {          $tt .= "<a href=\"#\" onClick=\"return clickreturnvalue()\" onMouseover=\"dropdownmenu(this, event, 'cnt_" . $slot_id . "')\">"  . $short_name . "</a>" . "</div>" . r;        } else {          $tt .= "<a href=\"#\" onClick=\"return clickreturnvalue()\" onMouseover=\"dropdownmenu(this, event, 'cnt_" . $slot_id . "')\"><img src=\"" . $icon_url . "\" width=\"36\" height=\"36\" border=\"0\"></a>" . "</div>" . r;        }      }       if ($match == 0) {        return "<div class=\"slot slot_color_1 " . (($class_id!="") ? " " . $class_id . " " : "") . "\">" . $short_name . "</div>" . r;      } else {        return $tt;      }    }    function print_achievement_info($cache_id) {      include_once("stubs/achievement.php");    }    function print_guild_info($cache_id, $guild_id) {      include_once("stubs/guild.php");    }    function print_saved_info() {      include_once("stubs/saved.php");    }    function print_arenateam_info($cache_id) {      include_once("stubs/arenateam.php");    }    function print_skill_info($cache_id) {      include_once("stubs/skill.php");    }        function print_talent_info($cache_id) {      include_once("stubs/talent.php");    }    function print_reputation_info($cache_id) {      include_once("stubs/reputation.php");    }    function print_main_info($cache_id) {      include_once("stubs/main.php");    }    function print_notes_info($cache_id) {      include_once("stubs/notes.php");    }    function print_character_info() {      include_once("stubs/char.php");    }    function print_stats_arena() {      include_once("stubs/arena.php");    }    function print_stats_networking() {      include_once("stubs/networking.php");    }    function print_stats_base() {      include_once("stubs/base.php");    }    function print_stats_melee() {      include_once("stubs/melee.php");    }    function print_stats_ranged() {      include_once("stubs/ranged.php");    }    function print_stats_spell() {      include_once("stubs/spell.php");    }    function print_stats_defense() {      include_once("stubs/defense.php");    }    function build_serverlist() {      $tstr = "";      $sql = "SELECT * FROM servers ORDER BY country_code DESC, lang ASC, server_name";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      if ($this->db->num_rows($res)) {        while ($row = $this->db->fetch_array($res)) {          $tstr .= "<option value=\"" . urlencode($row["server_name"]) . "_" . strtolower($row["country_code"]) . "\">" . $row["server_name"] . " - " . $row["country_code"] . " (" . $row["lang"] . ")</option>";                }        }      return $tstr;    }        function server_list() {      $sql = "SELECT * FROM servers ORDER BY country_code DESC, server_name";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);            return $res;    }        function server_find($server_name, $region="US") {      $sql = "SELECT * FROM servers WHERE country_code = '" . $region . "' AND server_name = '" . addslashes($server_name) . "'";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      if ($this->db->num_rows($res)) {        return 1;      } else {        return 0;      }    }    function server_add($server_name, $server_type, $region="US", $lang="en") {          $sql = "INSERT INTO servers (server_name, country_code, server_type, lang) VALUES               ('" . addslashes($server_name) . "','" . addslashes($region) . "','" . addslashes($server_type) . "','" . addslashes($lang) . "')";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      $_id = $this->db->insert_id();      if ($_id) {        return $_id;      } else {        return 0;      }    }    function get_skills($name, $val, $max) {      if ($max == 0) {  			$xx = "<div class=\"skill_line\"><div class=\"skill_name\">" . $name . "</div><div class=\"skill_box\"><span class=\"skill_bar Exalted\" style=\"width:100%;\">&nbsp;</span></div><div class=\"skill_lvl\">" . $val . "</div></div>" . r;        return $xx;      } else {        $pct = (abs($val) / abs($max));        $pct = floor($pct * 100);        if ($pct > 100) { $pct = 100; }  			$xx = "<div class=\"skill_line\"><div class=\"skill_name\">" . $name . "</div><div class=\"skill_box\"><span class=\"skill_bar " . (($pct==100) ? "Exalted" : "Honored") . "\" style=\"width:" . $pct . "%;\">&nbsp;</span></div><div class=\"skill_lvl\">" . $val . "/" . $max . "</div></div>" . r;        return $xx;      }    }    function get_reputation($name, $amount, $type=0) {			$levels = array(42000, 21000, 9000, 3000, 0, -3000, -6000, -42000);			$levelLabels = array("Exalted", "Revered", "Honored", "Friendly", "Neutral", "Unfriendly", "Hostile", "Hated");			$fc = "Hated";			$pct = 0;			$nextRep = -42000;			foreach($levels as $idx => $val) {				if($amount >= $val) {					$fc = $levelLabels[$idx];					$repLevel = $amount - $val;										if($idx == 0) {						$nextRep = 1000;						$pct = 1;					} else {						$nextRep = $levels[$idx-1] - $levels[$idx];						if($val < 0) {							$repLevel = $nextRep - $repLevel;						}						$pct = abs($repLevel) / abs($val - $levels[$idx-1]);					}					$pct = floor($pct * 100);					break;				}			}		  if(!$amount) { $amount = 0; }		  $xx = "";		  		  if ($type == 2) {        $typestr = "&nbsp;&nbsp;- ";		  } elseif ($type == 1) {        $typestr = "";      } else {        $typestr = "";      }			$xx .= "<div class=\"rep_line\"><div class=\"rep_name\">" . $typestr . $name . "</div><div class=\"rep_box\"><span class=\"rep_bar " . $fc . "\" style=\"width:" . $pct . "%;\">&nbsp;</span></div><div class=\"rep_lvl\">" . $fc . "</div><div class=\"rep_lvl\">" . $repLevel . "/" . $nextRep . "</div></div>" . r;      return $xx;    }    function get_guild_id($cache_id) {      $sql = "SELECT g.Guild_ID FROM ".$GLOBALS["g_ext"].".guilds g WHERE Cache_ID = '" . addslashes($cache_id) . "'";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      if ($this->db->num_rows($res)) {        $row = $this->db->fetch_array($res);        return $row["Guild_ID"];      } else {         return 0;       }    }            function delete_guild($cache_id) {      if ($cache_id) {        $sql = "DELETE FROM ".$GLOBALS["g_ext"].".guild_members WHERE Cache_ID = '" . addslashes($cache_id) . "'";        $this->debug .= $sql . "<br>";        $this->db->query($sql);        $sql = "DELETE FROM ".$GLOBALS["g_ext"].".guilds WHERE Cache_ID = '" . addslashes($cache_id) . "'";        $this->debug .= $sql . "<br>";        $this->db->query($sql);      }    }        function parse_guild($z, $cache_id) {      if (is_array($this->xml['PAGE'][0]['GUILDINFO'][0]['GUILD'][0]['MEMBERS'][0]['CHARACTER'])) {        foreach ( $this->xml['PAGE'][0]['GUILDINFO'][0]['GUILD'][0]['MEMBERS'][0]['CHARACTER'] as $gk => $gv ) {          ## do character insert and do summary update..          $dat['PAGE'][0]['CHARACTERINFO'][0]['CHARACTER'][0]['ATTRIBUTES']['POINTS'] = $gv['ATTRIBUTES']['ACHPOINTS'];                    $_cid = $this->get_characterid($z, $this->xml['PAGE'][0]['GUILDINFO'][0]['GUILDHEADER'][0]['ATTRIBUTES']['REALM'], $gv['ATTRIBUTES']['NAME']);          $_sid = $this->set_summaryinfo($_cid, $dat, $gv['ATTRIBUTES']['LEVEL'], $this->class_array[$gv['ATTRIBUTES']['CLASSID']], $this->race_array[$gv['ATTRIBUTES']['RACEID']], $this->xml['PAGE'][0]['GUILDINFO'][0]['GUILDHEADER'][0]['ATTRIBUTES']['FACTION'], $this->xml['PAGE'][0]['GUILDINFO'][0]['GUILDHEADER'][0]['ATTRIBUTES']['BATTLEGROUP'], $this->xml['PAGE'][0]['GUILDINFO'][0]['GUILDHEADER'][0]['ATTRIBUTES']['NAME']);        }      } else {        $this->print_header_info();        echo "<br /><br /><br /><div class=sub3>Armory Error - [Invalid Data [gp.1]] - Try accessing your Armory data again, or <a href=\"" . $this->lite_url . "/force/" . $this->page . "\">force</a> a reload. (Are you sure your <a href=\"" . $this->active_url . "\">Armory data</a> is valid?)</div>";        $this->print_footer_info();        exit;      }    }    ### achievement processes ###############################################################        function achievement_parse_category($xml) {      if (is_array($xml['ACHIEVEMENTS'][0]['CATEGORY'][0]['ACHIEVEMENT'])) {              echo "parsing grid...<br>";                      }        }    ### claim processes #####################################################################    function claim_links() {      $t = "";      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".claims WHERE Character_ID = '" . $this->chid . "'";       $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);      if ($x["Member_ID"]) {        $e = $this->get_memberbyid($x["Member_ID"]);              $y = $this->db->fetch_array($e);        $t .= "Character claimed by <a href='#' class='clnk'>" . $y["username"] . "</a>";        $q = "SELECT * FROM ".$GLOBALS["g_ext"].".claims WHERE Member_ID = '" . $x["Member_ID"] . "' AND Claim_Status = 1";        $this->debug .= $q . "<br>";        $r = $this->db->query($q);                $f = "";        while ($c = $this->db->fetch_array($r)) {          $ci = $this->get_characterinfo($c["Character_ID"]);          if ($ci["Character_ID"] != $this->chid) {            $f .= "<a class='clnk' href='/" . stripslashes(strtolower($ci["Region"])) . "/" . stripslashes(strtolower(urlencode($ci["Server"]))) . "/" . stripslashes(strtolower($ci["Toon"])) . "/'>". stripslashes(ucwords($ci["Toon"])) . "</a>, ";                      }                        }                if ($f) {          $f = substr($f, 0, -2);          $t .= " - Also: " . $f;              }        return $t;      } else {        return "";      }    }        function slot_getname($slot_id) {      $slot_keys = array(                          0  => "Helmet",                           1  => "Necklace",                           2  => "Shoulders",                           4  => "Chest",                           5  => "Belt",                           6  => "Legs",                           7  => "Boots",                           8  => "Bracers",                           9  => "Gloves",                           14 => "Cloak"                        );      return $slot_keys[(int)$slot_id];        }    function claim_getlist($member_id) {      $sql = "SELECT c.*, ch.* FROM ".$GLOBALS["g_ext"].".claims c INNER JOIN ".$GLOBALS["g_ext"].".characters ch ON c.Character_ID = ch.Character_ID WHERE c.Member_ID = '" . addslashes($member_id) . "'";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      return $res;    }    function claim_close($claim_id) {      $sql = "DELETE FROM ".$GLOBALS["g_ext"].".claims WHERE Claim_ID = '" . $claim_id . "'";       $this->debug .= $sql . "<br>";      $this->db->query($sql);              }    function claim_check($z, $r, $n)  {          $_chid = $this->get_characterid($z, $r, $n, false);            if ($_chid == "-1") {        return array (-1, null, null);      } else {        ## we have a character, lets check if we have an existing claim and who it belongs to..        $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".claims WHERE Character_ID = '" . addslashes($_chid) . "'";        $this->debug .= $sql . "<br>";        $res = $this->db->query($sql);        if (!$res) {          handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);        }        if ($this->db->num_rows($res)) {          $row = $this->db->fetch_array($res);          return array ($row["Claim_ID"], $row["Character_ID"], $row["Member_ID"], $row["Claim_Date"], $row["Claim_Status"]);        } else {           return array (0, $_chid, null, null, null);         }      }    }        function claim_approve($claim_id) {      $sql = "UPDATE ".$GLOBALS["g_ext"].".claims SET Claim_Status = 1 WHERE Claim_ID = '" . $claim_id . "'";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }    }        function claim_validate($claim_id) {      $sql = "SELECT Slot_1, Slot_2, Slot_3 FROM ".$GLOBALS["g_ext"].".claims WHERE Claim_ID = '" . addslashes($claim_id) . "'";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      $row = $this->db->fetch_array($res);    }    function claim_delete($claim_id, $member_id) {      $sql = "DELETE FROM ".$GLOBALS["g_ext"].".claims WHERE Claim_ID = '" . addslashes($claim_id) . "' AND Member_ID = '" . addslashes($member_id) . "'";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        return 1;      }    }    function claim_get($claim_id, $member_id) {      $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".claims cl INNER JOIN ".$GLOBALS["g_ext"].".characters ch ON cl.Character_ID = ch.Character_ID WHERE Claim_ID = '" . addslashes($claim_id) . "' AND Member_ID = '" . addslashes($member_id) . "'";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        return $res;      }    }        function claim_open($chid, $memberid) {      $tim = time();      $slot_keys = array(                          0  => "Helmet",                           1  => "Necklace",                           2  => "Shoulders",                           4  => "Chest",                           5  => "Belt",                           6  => "Legs",                           7  => "Boots",                           8  => "Bracers",                           9  => "Gloves",                           14 => "Cloak"                        );      $armory_rand = array_rand($slot_keys, 3);      $sql = "INSERT INTO ".$GLOBALS["g_ext"].".claims (Character_ID, Member_ID, Claim_Status, Slot_1, Slot_2, Slot_3, Claim_Date) VALUES (" . addslashes($chid) . "," . addslashes($memberid) . ", 0, " . $armory_rand[0] . ", " . $armory_rand[1] . ", " . $armory_rand[2] . ", " . $tim . ")";      $this->debug .= $sql . "<br>";      $r = $this->db->query($sql);      if (!$r) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        $_id = $this->db->insert_id();      }      return array ($_id, $slot_keys[$armory_rand[0]], $slot_keys[$armory_rand[1]], $slot_keys[$armory_rand[2]]);    }      ### member registration #################################################################    function get_member($username) {      $sql = "SELECT * FROM ".$GLOBALS["c_ext"].".members WHERE username = '" . addslashes($username) . "'";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        return $res;      }    }        function get_memberbyid($member_id) {      $sql = "SELECT * FROM ".$GLOBALS["c_ext"].".members WHERE id = '" . addslashes($member_id) . "'";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        return $res;      }    }    function member_getbyemail($email) {      $sql = "SELECT * FROM ".$GLOBALS["c_ext"].".members WHERE email = '" . addslashes($email) . "'";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      $row = $this->db->fetch_array($res);      if (!$res) {        return 0;      } else {        return $row["id"];      }    }        function get_username($user_id) {      $sql = "SELECT username FROM ".$GLOBALS["c_ext"].".members WHERE id = '" . addslashes($user_id) . "'";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      $row = $this->db->fetch_array($res);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        if ($user_id == 0) {          return "System";                } else {          return $row["username"];        }      }    }        function get_memberid($username) {      $sql = "SELECT id FROM ".$GLOBALS["c_ext"].".members WHERE username = '" . addslashes($username) . "'";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      $row = $this->db->fetch_array($res);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        return $row["id"];      }    }    function login_member($username, $password) {            $dat = $this->get_member($username);      $row = $this->db->fetch_array($dat);      if ($row["id"]) {        $pass = md5($password);        if ($row["password"] == $pass) {          if ($row["status_id"] > 0) {            return 1;          } else {            return -111;          }        } else {          return -11;        }      } else {        return -10;      }        }    function update_member($username, $password, $email, $name, $icon) {      $dat = $this->get_member($username);      $row = $this->db->fetch_array($dat);      if ($row["id"]) {        $pass = md5($password);        $sql  = " UPDATE ".$GLOBALS["c_ext"].".members SET ";        $sql .= " password = '" . addslashes($pass) . "'";        if ($email) {          $sql .= ", email = '" . addslashes($email) . "'";        }        if ($name) {          $sql .= ", full_name = '" . addslashes($name) . "'";        }#        if ($icon) {#         $sql .= ", Icon = '" . addslashes($icon) . "'";#        }        $sql .= " WHERE id = '" . $row["id"] . "'";            $this->debug .= $sql . "<br>";        $res = $this->db->query($sql);        return 1;              } else {        return -1;      }    }    function activate_member($username, $code) {            $dat = $this->get_member($username);      $row = $this->db->fetch_array($dat);      if ($row["id"]) {        if ($row["auth_key"] == $code) {          $sql = "UPDATE ".$GLOBALS["c_ext"].".members SET status_id = 1 WHERE id = '" . addslashes($row["id"]) . "'";          $this->debug .= $sql . "<br>";          $res = $this->db->query($sql);          return 1;                } else {          return -1;        }      } else {        return -1;      }          }        function member_reset($type, $value) {          switch ($type) {        case "e":          $mid = $this->member_getbyemail($value);          $code = $this->rand_str(10);          $pass = md5($code);          if ($mid > 0) {            $sql = "UPDATE ".$GLOBALS["c_ext"].".members SET password = '" . addslashes($pass) . "' WHERE email = '" . addslashes($value) . "'";                $this->debug .= $sql . "<br>";            $res = $this->db->query($sql);                      $subject = "Armory Lite - Password Reset";            $headers = "From: no-reply@armorylite.com";            $body = "      Hi, We've reset your password to the following:        " . $code . "      You can use this temporary password to log into your account(s).        Thanks for using Armorylite!                         ";            if (mail($value, $subject, $body, $headers)) {              $code = 1;            } else {              $code = -1;            }          } else {            $code = -2;          }          break;      }            return $code;    }            function register_member($username, $password, $email) {          ## check username, make sure it doesnt already exist..      $dat = $this->get_member($username);      $row = $this->db->fetch_array($dat);            if ($row["id"]) {        ## user already exists, return..        return -10;      } else {        ## not found, good to add..        $code = $this->rand_str(20);        $pass = md5($password);        $sql = "INSERT INTO ".$GLOBALS["c_ext"].".members                 (email, username, password, full_name, status, accesslevel, auth_key)                 VALUES (                '" . addslashes($email) . "',                '" . addslashes($username) . "',                '" . addslashes($pass) . "',                '',                0,                0,                '" . $code . "')";        $this->debug .= $sql . "<br>";        $r = $this->db->query($sql);        if (!$r) {          handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);        } else {          $_id = $this->db->insert_id();        }        ### send an email...         $subject = "Armory Lite - Account Activation";        $headers = "From: no-reply@".$GLOBALS["g_ext"].".com";        $body = "  Hi " . ucfirst($username) . " - welcome to Armorylite!    To activate your account, please visit the following link:    http://armorylite.com/activate.php?c=" . $code . "    Thanks for using Armory Lite!                   ";        if (mail($email, $subject, $body, $headers)) {          return 1;        } else {          return -11;         }      }    }        function serverpop($server_name, $country_code, $server_type) {            if (($server_name) && ($country_code)) {              $q = "SELECT * FROM ".$GLOBALS["g_ext"].".servers WHERE server_name = '" . addslashes($server_name) . "' AND country_code = '" . addslashes($country_code) . "'";        $this->debug .= $q . "<br>";        $r = $this->db->query($q);        $d = $this->db->fetch_array($r);        if ($d["server_name"]) {        } else {          $q = "INSERT INTO ".$GLOBALS["g_ext"].".servers (server_name, country_code, server_type, lang) VALUES ('" . addslashes($server_name) . "','" . addslashes($country_code) . "', '" . addslashes($server_type) . "', 'en')";          $this->debug .= $q . "<br>";          $r = $this->db->query($q);        }      }    }    function rand_str($len=10) {      $chars = "abcdefghijkmnopqrstuvwxyz023456789";      srand((double)microtime()*1000000);      $i = 0;      $pass = "";      while ($i <= $len) {          $num = rand() % 33;          $tmp = substr($chars, $num, 1);          $pass = $pass . $tmp;          $i++;      }      return $pass;    }    function crypt($str, $ky=""){      if ($ky == "") { return $str; }      $ky = str_replace(chr(32),'',$ky);      if (strlen($ky) < 8) { exit('key error'); }      $kl = ((strlen($ky) < 32) ? strlen($ky) : 32);      $k = array();      for ($i=0;$i<$kl;$i++) {        $k[$i]=ord($ky{$i})&0x1F;      }      $j=0;      for ($i=0;$i<strlen($str);$i++) {        $e=ord($str{$i});        $str{$i}=$e&0xE0?chr($e^$k[$j]):chr($e);        $j++;        $j=$j==$kl?0:$j;      }      return $str;    }     ############################################################################################    #### forum functions #######################################################################    function forum_getname($forum_id) {      $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".forum_groups WHERE Group_ID = '" . addslashes($forum_id) . "'";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        $row = $this->db->fetch_array($res);        return ($row["Group_Name"]);      }    }        function forum_getnames() {      $tstr = "";      $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".forum_groups ORDER BY Group_Name ASC";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      if ($this->db->num_rows($res)) {        while ($row = $this->db->fetch_array($res)) {          $tstr .= "<option value=\"" . $row["Group_ID"] . "\">" . $row["Group_Name"] . "</option>";                }          return $tstr;      } else {        return "";      }    }        function forum_getthreadtitle($thread_id) {      $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".forum_topics t WHERE t.Topic_ID = '" . addslashes($thread_id) . "'";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        $row = $this->db->fetch_array($res);        return ($row["Topic_Name"]);      }    }        function forum_threadlist($forum_id, $start) {      $sql = "SELECT t.*, m.username, m.accesslevel, (SELECT COUNT(*) As 'cnt' FROM ".$GLOBALS["g_ext"].".forum_posts p WHERE Thread_ID = t.Topic_ID) AS cnt FROM ".$GLOBALS["g_ext"].".forum_topics t INNER JOIN ".$GLOBALS["c_ext"].".members m ON m.id = t.Creator_Member_ID WHERE t.Group_ID = '" . addslashes($forum_id) . "' ORDER BY Topic_Status DESC, Last_Reply DESC";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        return ($res);      }    }        function forum_postlist($thread_id, $start) {      $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".forum_posts p INNER JOIN ".$GLOBALS["c_ext"].".members m ON m.id = p.Member_ID WHERE p.Thread_ID = '" . addslashes($thread_id) . "' ORDER BY Post_ID ASC";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        return ($res);      }    }    function forum_postnav($thread_id, $start) {    }    function forum_threadnav($forum_id, $start) {    }            function forum_postreply($forum_id, $thread_id, $username, $title, $body) {      $tim = time();      $sql = "SELECT id FROM ".$GLOBALS["c_ext"].".members WHERE username = '" . addslashes($username) . "'";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        $row = $this->db->fetch_array($res);        $_userid = $row["id"];      }      if ($_userid) {        $sql = "INSERT INTO ".$GLOBALS["g_ext"].".forum_posts (Thread_ID, Member_ID, Post_Date, Post_Status, Post_Title, Post_Body)                VALUES (                '" . addslashes($thread_id) . "',                '" . addslashes($_userid) . "',                '" . addslashes($tim) . "', 1,                '" . addslashes($title) . "',                '" . addslashes($body) . "'                )";        $this->debug .= $sql . "<br>";        $res = $this->db->query($sql);        if (!$res) {          handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);        } else {          $_pid = $this->db->insert_id();          $sql = "UPDATE ".$GLOBALS["g_ext"].".forum_topics SET Last_Reply = '" . addslashes($tim) . "' WHERE Topic_ID = '" . addslashes($thread_id) . "'";          $this->debug .= $sql . "<br>";          $this->db->query($sql);        }      }        }    function forum_posttopic($forum_id, $username, $title, $body) {      $tim = time();      $sql = "SELECT id FROM ".$GLOBALS["c_ext"].".members WHERE username = '" . addslashes($username) . "'";          $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      } else {        $row = $this->db->fetch_array($res);        $_userid = $row["id"];      }      if ($_userid) {        $sql = "INSERT INTO ".$GLOBALS["g_ext"].".forum_topics (Group_ID, Topic_Name, Creator_Member_ID, Create_Date, Topic_Status, Last_Reply)                 VALUES (                '" . addslashes($forum_id) . "',                '" . addslashes($title) . "',                '" . addslashes($_userid) . "',                '" . addslashes($tim) . "', 1,                '" . addslashes($tim) . "'                )";        $this->debug .= $sql . "<br>";        $res = $this->db->query($sql);        if (!$res) {          handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);        } else {          $_id = $this->db->insert_id();        }        $sql = "INSERT INTO ".$GLOBALS["g_ext"].".forum_posts (Thread_ID, Member_ID, Post_Date, Post_Status, Post_Title, Post_Body)                VALUES (                '" . addslashes($_id) . "',                '" . addslashes($_userid) . "',                '" . addslashes($tim) . "', 1,                '" . addslashes($title) . "',                '" . addslashes($body) . "'                )";        $this->debug .= $sql . "<br>";        $res = $this->db->query($sql);        if (!$res) {          handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);        } else {          $_pid = $this->db->insert_id();        }      }    }    function get_classes() {      $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".classes ORDER BY Class_Name ASC";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      return $res;        }    function get_classlist($class_id=0) {      $tstr = "";      $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".classes ORDER BY Class_Name ASC";      $this->debug .= $sql . "<br>";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      if ($this->db->num_rows($res)) {        while ($row = $this->db->fetch_array($res)) {          $tstr .= "<option " . (($class_id == $row["Class_ID"]) ? " selected " : "") . " value=\"" . $row["Class_ID"] . "\">" . $row["Class_Name"] . "</option>";                }          return $tstr;      } else {        return "";      }    }    function get_class($class_id) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".classes WHERE Class_ID = '" . addslashes($class_id) . "'";      $this->debug .= $q . "<br>";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);            if ($x["Class_Name"]) {        return $x["Class_Name"];      } else {        return null;      }    }    function b2w($class, $build, $return_as_url = true) {    	$classes = array('druid','hunter','mage','paladin','priest','rogue','shaman','warlock','warrior','deathknight');    	$trees = array(array(28,30,27),array(26,27,28),array(30,28,28),array(26,26,26),array(28,27,27),array(27,28,28),array(25,29,26),array(28,26,25),array(31,27,27),array(28,28,30));        	$encrypt = '0zMcmVokRsaqbdrfwihuGINALpTjnyxtgevElBCDFHJKOPQSUWXYZ123456789';    	$none = 'Z';        	for ($i = 0; $i < count($classes); $i++) {    		if (strtolower($class) == $classes[$i]) {    			$class = $i;        }      }        	$return = $encrypt[$class*3];        	$build_trees = array(    		substr($build,0,$trees[$class][0]),    		substr($build,$trees[$class][0],$trees[$class][1]),    		substr($build,$trees[$class][0]+$trees[$class][1],$trees[$class][2])    	);        	foreach ($build_trees as $cur_tree) {    		$pre_return = '';    		$b = rtrim($cur_tree, '0');    		for ($i=0; $i<strlen($b); $i++)    		{    			$tens = intval($b[$i]);    			$ones = (++$i == strlen($b))? 0: intval($b[$i]);    			$pre_return .= $encrypt[$tens*6 + $ones];    		}    		$return .= (strlen($b)==strlen($cur_tree))? $pre_return: $pre_return.$none;    	}        	$return = rtrim($return, $none);    	    	if ($return_as_url == true) {    		return 'http://www.wowhead.com/?talent#'.$return;      } else {    		return $return;      }    }  }                        #### armorylite.com ##########################################################################  #### admin class structure ###################################################################  class armorylite_admin {    var $err = array();    var $db;    var $xml;    var $url;    function __construct() {      $this->db = $GLOBALS["g_db"];    }    function __destruct() {      $this->db->close();      return true;    }    function check_login($nl) {      if (!isset($_COOKIE["username"])) {        if ($nl != 2) {          header("location: /admin/login.php?p=".$_SERVER['PHP_SELF']);        }       }    }        function get_classlist($class_id) {      $tstr = "";      $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".classes ORDER BY Class_Name ASC";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      if ($this->db->num_rows($res)) {        while ($row = $this->db->fetch_array($res)) {          $tstr .= "<option " . (($class_id == $row["Class_ID"]) ? " selected " : "") . " value=\"" . $row["Class_ID"] . "\">" . $row["Class_Name"] . "</option>";                }          return $tstr;      } else {        return "";      }    }    function get_class($class_id) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".classes WHERE Class_ID = '" . addslashes($class_id) . "'";      $r = $this->db->query($q);      $x = $this->db->fetch_array($r);      if ($x["Class_Name"]) {        return array ($x["Class_Name"], $x["Class_ID"]);      } else {        return array (null, null);      }    }    function delete_talentslot($tsid) {      $q = "DELETE FROM ".$GLOBALS["g_ext"].".talents WHERE Talent_Slot_ID = '" . addslashes($tsid) . "' AND Build = '" . TALENT_BUILD . "'";          $r = $this->db->query($q);      if (!$r) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }    }    function get_talentslot($tsid) {      $q = "SELECT * FROM ".$GLOBALS["g_ext"].".talents WHERE Talent_Slot_ID = '" . addslashes($tsid) . "' AND Build = '" . TALENT_BUILD . "'";      $r = $this->db->query($q);      if (!$r) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      $x = $this->db->fetch_array($r);      return $x;    }    function get_characterqueue($lim) {      $q = "SELECT c.* FROM ".$GLOBALS["g_ext"].".characters c WHERE c.Status = 1 LIMIT " . addslashes($lim);      $r = $this->db->query($q);      if (!$r) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      return $r;    }        function clean_items() {      $sql = "SELECT * FROM ".$GLOBALS["g_ext"].".items WHERE Item_Quality = 0 AND Item_iLevel = 0";      $res = $this->db->query($sql);      if (!$res) {        handleError($GLOBALS["SCRIPT_NAME"], $this->db->errors);      }      if ($this->db->num_rows($res)) {        $tt = "";        while ($row = $this->db->fetch_array($res)) {                    ## delete the item and write it to the console..          $tt .= "Deleting [" . $row["Item_Index_ID"] . "][WOWID-" . $row["Item_ID"] . "][" . $row["Item_Name"] . "]<br>";           $q = "DELETE FROM ".$GLOBALS["g_ext"].".items WHERE Item_Index_ID = " . $row["Item_Index_ID"] . " LIMIT 1";          $this->db->query($q);        }          return $tt;      } else {        return "Nothing processed.";      }    }            function set_characterqueued($character_id) {      $this->sql = "UPDATE LOW_PRIORITY ".$GLOBALS["g_ext"].".characters SET Status = 2 WHERE Character_ID = '" . addslashes($character_id) . "'";      ##register_shutdown_function('.queue_background');	  ##register_shutdown_function(array($this, 'queue_background'));      $this->db->query($this->sql);    }    static function queue_background() {      if ($this->sql) {        $this->db->query($this->sql);      }    }                }  ?>